import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel('airquality_data.xlsx')
df.head()

# a) Data Cleaning
# Show basic info
df.info()


# Show missing values
print("Missing values:\n", df.isnull().sum())


# Drop rows with too many missing values or impute
df = df.dropna(thresh=len(df.columns)-2)  # drop rows with more than 2 missing values
df.fillna(df.mean(numeric_only=True), inplace=True)  # fill numeric NaNs with column mean


# Drop duplicates if any
df.drop_duplicates(inplace=True)


# Check again
df.info()


# (b) Data Integration
# Creating data subsets
df1 = df[['state','location','agency','type']]
df2 = df[['so2','no2','rspm','spm']]


merging=pd.concat([df1,df2],axis=1)
merging



# (c) Data transformation
# Create new feature (e.g., Air Quality Index Category)
def aqi_category(pm2_5):
    if pm2_5 <= 0.12:
        return 'Good'
    elif pm2_5 <= 0.35:
        return 'Moderate'
    else:
        return 'Unhealthy'

df['AQI_Category'] = df['pm2_5'].apply(aqi_category)

df.head()



# (d) Error correcting
# Find anomalies (e.g., negative values in PM2.5)
print("Negative pm2_5 values:\n", df[df['pm2_5'] < 0])

# Replace negative values with NaN and then fill
df['pm2_5'] = df['pm2_5'].apply(lambda x: np.nan if x < 0 else x)
df['pm2_5'].fillna(df['pm2_5'].mean(), inplace=True)


# (e) Data model building
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Clean and prepare the data
model_df = df[['so2', 'no2']].dropna()  # drop rows with missing so2 or no2



# Define X and y
X = model_df[['so2']]   # independent variable
y = model_df['no2']     # dependent variable

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train linear regression model
model = LinearRegression()
model.fit(X_train, y_train)


# Make predictions
y_pred = model.predict(X_test)


# Evaluate the model
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))


# Plot actual vs predicted NO2 values
plt.scatter(X_test, y_test, color='purple', label='Actual NO2')
plt.plot(X_test, y_pred, color='black', label='Predicted NO2')
plt.xlabel('SO2')
plt.ylabel('NO2')
plt.title('Linear Regression: SO2 vs NO2')
plt.legend()
plt.grid(True)
plt.show()





//theory:
(a) Data Cleaning

The dataset is loaded using pd.read_excel().

df.info() displays data types and missing values.

df.isnull().sum() shows how many null values are in each column.

Rows with more than 2 missing values are dropped using df.dropna(thresh=...).

Numeric columns with missing values are filled with their respective column means using fillna().

Duplicate rows (if any) are removed using drop_duplicates().

(b) Data Integration

Two data subsets are created:

df1 includes categorical columns like 'state', 'location', 'agency', and 'type'.

df2 includes pollutant readings: 'so2', 'no2', 'rspm', and 'spm'.

These subsets are merged side-by-side using pd.concat().

(c) Data Transformation

A custom function aqi_category() is defined to classify air quality based on pm2_5 values.

'Good' for values â‰¤ 0.12

'Moderate' for values â‰¤ 0.35

'Unhealthy' for values > 0.35

This function is applied to the pm2_5 column to create a new feature AQI_Category.

(d) Error Correcting

Anomalies in the data (like negative pm2_5 values) are detected using a filter.

Negative values are replaced with NaN.

These NaN values are then filled with the mean of the pm2_5 column.

(e) Data Model Building

A linear regression model is built to predict no2 based on so2.

Data for these columns is selected and rows with missing values are dropped.

The data is split into training and testing sets (80/20).

A LinearRegression model is trained using the training data.

The model is evaluated using:

Mean Squared Error (MSE): Measures prediction error.

RÂ² Score: Shows how well the model explains the variability in the data.

A scatter plot is drawn to show the actual vs predicted NO2 values using matplotlib.
ðŸ”¢ Code:
python
Copy
Edit
plt.scatter(X_test, y_test, color='purple', label='Actual NO2')
ðŸ“Œ Explanation:

This plots the actual NOâ‚‚ values as purple dots.

X_test: SOâ‚‚ values (x-axis)

y_test: Actual NOâ‚‚ values (y-axis)

This helps us see the real data points.

python
Copy
Edit
plt.plot(X_test, y_pred, color='black', label='Predicted NO2')
ðŸ“Œ Explanation:

This draws a black line showing the predicted NOâ‚‚ values based on the model.

y_pred are the values predicted using the SOâ‚‚ test data.

This shows us how well the model is fitting the data (i.e., the regression line).

python
Copy
Edit
plt.xlabel('SO2')
ðŸ“Œ Explanation:

Labels the x-axis with "SO2" (Sulphur Dioxide levels)

python
Copy
Edit
plt.ylabel('NO2')
ðŸ“Œ Explanation:

Labels the y-axis with "NO2" (Nitrogen Dioxide levels)

python
Copy
Edit
plt.title('Linear Regression: SO2 vs NO2')
ðŸ“Œ Explanation:

Adds a title to the graph: 'Linear Regression: SO2 vs NO2'

python
Copy
Edit
plt.legend()
ðŸ“Œ Explanation:

Shows the legend on the plot, which helps us know which color represents actual vs predicted values.

python
Copy
Edit
plt.grid(True)
ðŸ“Œ Explanation:

Adds a grid to the background to make it easier to read and compare values.

python
Copy
Edit
plt.show()
ðŸ“Œ Explanation:

Finally, this displays the graph window.


ðŸŽ“ VIVA QUESTIONS & ANSWERS

Mean Squared Error (MSE)
What it is: It measures how far off your modelâ€™s predictions are from the actual values.

How it works:

For each prediction, it calculates the difference from the actual value.

It squares those differences (to remove negatives and give more weight to larger errors).

Then it takes the average of all those squared errors.

ðŸ“Œ Lower MSE = Better model

Think of it like: "How badly am I guessing?"

âœ… RÂ² Score (R-squared or Coefficient of Determination)
What it is: It measures how well your model fits the data.

Range: Between 0 and 1

0 means: The model does not explain anything.

1 means: The model perfectly explains the data.

ðŸ“Œ Closer to 1 = Better fit

Think of it like: "How much of the variation in NOâ‚‚ can I explain using SOâ‚‚?"
Q1. Why did you use dropna(thresh=...)?
A. To drop rows with more than 2 missing values while retaining usable data.

Q2. How did you handle missing numeric values?
A. I replaced them with the column mean using fillna().

Q3. Why did you remove duplicates?
A. To ensure data quality and avoid repetition in model learning.

Q4. What is the purpose of data integration here?
A. To combine relevant categorical and numeric features into a unified dataset.

Q5. What does the AQI_Category feature represent?
A. It categorizes air quality based on pm2_5 levels as 'Good', 'Moderate', or 'Unhealthy'.

Q6. Why did you check for negative values in pm2_5?
A. Because negative pollution values are not realistic and indicate data errors.

Q7. Why did you choose Linear Regression?
A. Because the goal was to predict a continuous value (no2) based on another variable (so2).

Q8. What does the RÂ² score tell you?
A. It tells how much of the variability in no2 can be explained by so2.

Q9. What does Mean Squared Error (MSE) represent?
A. It measures the average of the squares of errors between actual and predicted values.

Q10. Why is the plot important in this analysis?
A. The scatter plot helps visually compare actual and predicted NO2 levels.



